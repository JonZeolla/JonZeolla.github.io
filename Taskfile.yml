---
# https://taskfile.dev

version: '3'

set:
  - nounset
  - errexit
  - pipefail

silent: true

# This sets the watch interval to .5s; https://taskfile.dev/usage/#watch-tasks
interval: '500ms'

tasks:
  lock:
    desc: Update uv.lock if pyproject.toml has changed
    internal: true
    sources:
      - pyproject.toml
    generates:
      - uv.lock
    cmds:
      - uv lock

  init-uv:
    desc: Initializes uv if uv.lock changes
    internal: true
    sources:
      - uv.lock
    cmds:
      - uv sync

  runner-apt-install:
    desc: Install something on a GitHub Actions runner via apt
    internal: true
    status:
      - '{{if eq .GITHUB_ACTIONS "true"}}exit 1{{end}}'
    requires:
      vars: [TOOLS]
    preconditions:
      - sudo apt-get update
    platforms: [linux]
    cmds:
      - for:
          var: TOOLS
          split: ','
          as: tool
        cmd: sudo apt-get install -y --no-install-recommends {{.tool}}

  mac-brew-install:
    desc: Install something on a mac via brew
    internal: true
    platforms: [darwin]
    requires:
      vars: [TOOLS]
    cmds:
      - for:
          var: TOOLS
          split: ','
          as: tool
        cmd: brew install {{.tool}}

  init-install-tools:
    desc: Install required tools
    internal: true
    cmds:
      - task: runner-apt-install
        vars:
          TOOLS: xclip

  init:
    desc: Initialize the repo for local use; intended to be run after git clone
    deps: [lock]
    cmds:
      - task: init-uv
      - task: init-install-tools
      - uv run playwright install --with-deps chromium

  build:
    desc: Build the project
    # Sources are needed for auto-rebuilding via the taskfile watch feature
    sources:
      - docs/**/*.md
      - docs/**/*.py
      - docs/**/*.rst
    cmds:
      - uv run sphinx-build -b html docs build

  open:
    desc: Open the home page
    deps: [build]
    cmds:
      - open {{.ROOT_DIR}}/build/index.html

  test:
    desc: Run the project tests
    deps: [clean, build]
    # Tests only work locally for now
    platforms: [darwin]
    env:
      LOG_LEVEL: '{{ .CLI_ARGS | default "INFO" }}'
      # Not used; change -n0 below to -n "${NUMBER_OF_LABS}" when tests are parallelizable
      NUMBER_OF_LABS:
        sh: find docs/labs/ -name '*.md' | wc -l
    cmds:
      - uv run pytest -n0 -v tests/ --log-cli-level "${LOG_LEVEL}"

  # Essentially an alias
  deploy:
    desc: Deploy the lab environment
    cmds:
      - task: deploy-lab

  # Essentially an alias
  lab:
    desc: Deploy the lab environment
    cmds:
      - task: deploy-lab

  deploy-lab:
    desc: Deploy the lab environment
    cmds:
      - cd lab && tofu init && tofu apply -auto-approve

  destroy:
    desc: Run tofu destroys and cleanup all of the labs and test opentofu modules
    cmds:
      - cd lab && tofu init && tofu destroy -auto-approve
      - |
        if [[ -z "${LAB+x}" ]]; then
          for dir in $(find tests -type d -maxdepth 1 -mindepth 1); do
            pushd "${dir}" >/dev/null
            echo "Running destroy in ${dir}..."
            tofu init
            tofu destroy -auto-approve
            popd >/dev/null
          done
        else
          pushd "tests/${LAB}" >/dev/null
          echo "Running destroy in tests/${LAB}..."
          tofu init
          tofu destroy -auto-approve
          popd >/dev/null
        fi

  update:
    desc: Update the project dependencies, and other misc components
    cmds:
      - '{{if ne .GITHUB_ACTIONS "true"}}brew upgrade uv{{end}}'
      - uv lock --upgrade

  clean:
    desc: Clean up build artifacts, cache files/directories, temp files, etc.
    cmds:
      - rm -rf {{.ROOT_DIR}}/build/
      - find {{.ROOT_DIR}} -type d -name '.mypy_cache' -exec rm -rf {} +
      - find {{.ROOT_DIR}} -type d -name '.pytest_cache' -exec rm -rf {} +
      - find {{.ROOT_DIR}} -type d -name '.ruff_cache' -exec rm -rf {} +
      - find {{.ROOT_DIR}} -type d -name '.task' -exec rm -rf {} +
      - find {{.ROOT_DIR}} -type d -name '__pycache__' -exec rm -rf {} +
      - find {{.ROOT_DIR}} -type d -name 'coverage-reports' -exec rm -rf {} +
      - find {{.ROOT_DIR}} -type f -name '*.pyc' -delete
      - find {{.ROOT_DIR}} -type f -name '.DS_Store' -delete
      - find {{.ROOT_DIR}} -type f -name '.Thumbs.db' -delete
      - find {{.ROOT_DIR}} -type f -name '.coverage' -delete
      - find {{.ROOT_DIR}} -type d -name '.terraform' -exec rm -rf {} +
      - find {{.ROOT_DIR}} -type f -name '.terraform.lock.hcl' -delete
      # Leaving this commented out because it could accidentally kill state for a deployed environment; the above terraform lines should be enough
      # - find {{.ROOT_DIR}}/tests -type d -maxdepth 1 -mindepth 1 -exec rm -rf {} +
